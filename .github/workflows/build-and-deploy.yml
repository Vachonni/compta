# Reusable workflow for build and deploy
name: Build and Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      port:
        required: true
        type: string
      container_name:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set lowercase repo owner
        id: repo_owner
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set image name
        id: image
        run: echo "image=ghcr.io/${{ steps.repo_owner.outputs.owner }}/compta-data-app:${{ inputs.image_tag }}" >> $GITHUB_OUTPUT

      - name: Python Build and Test
        uses: ./.github/actions/python-build-test
        with:
          python-version: '3.13'
        env:
          LOCAL_DATABASES_DIR: ${{ vars.LOCAL_DATABASES_DIR }}
          DOCKER_DATABASES_DIR: ${{ vars.DOCKER_DATABASES_DIR }}

      - name: Build and Push Docker image
        uses: ./.github/actions/build-to-ghcr
        with:
          image: ${{ steps.image.outputs.image }}
          image_extra: ${{ steps.image.outputs.image }}-${{ github.sha }}
          build_context: services/database
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_actor: ${{ github.actor }}
        

  deploy:
    needs: build
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set lowercase repo owner
        id: repo_owner
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Deploy Docker container
        uses: ./.github/actions/deploy-docker-local
        with:
          image: ${{ needs.build.outputs.image }}
          name: ${{ inputs.container_name }}
          port: ${{ inputs.port }}
          volume: ${{ vars.local_databases_dir }}:${{ vars.docker_databases_dir }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_actor: ${{ github.actor }}
        env:
          APP_ENV: ${{ env.APP_ENV }}
          LOCAL_DATABASES_DIR: ${{ vars.LOCAL_DATABASES_DIR }}
          DOCKER_DATABASES_DIR: ${{ vars.DOCKER_DATABASES_DIR }}

  test:
    needs: deploy
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    steps:
      - name: Extract port number
        id: port
        run: echo "number=$(echo ${{ inputs.port }} | cut -d':' -f1)" >> $GITHUB_OUTPUT

      - name: Wait for API to be ready
        run: bash scripts/health-check.sh ${{ steps.port.outputs.number }}

      - name: Test API endpoint
        run: bash scripts/test-sql.sh ${{ steps.port.outputs.number }} ${{ inputs.environment == 'staging' && 'dev_db' || 'prod_db' }}
